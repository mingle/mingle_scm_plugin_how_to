<!-- Copyright (c) 2010 ThoughtWorks Inc., licensed under Creative Commons Attribution 3.0 Unported license http://creativecommons.org/licenses/by/3.0/ -->

<?xml version="1.0"?>
<chapter title="History Integration">

  <p>To this point, you've done a fair bit of work without much payoff in terms of seeing your SCM tool integrate with Mingle. Let's quickly change that. You will now build the piece that allows revisions to show in Mingle's global and card history.</p>

  <note>
    <p>Following along with hg plugin source code:</p>
    <p>You will want to look at app/models/hg_repository.rb and app/models/hg_changeset.rb when reading this section.</p>
  </note>

  <section title="Repository and Revision">
    <p>In order to include revisions in project and card history, your configuration model must supply a <inlinecode>repository</inlinecode> method which returns an object representing your source repository. For purposes of history integration, the repository need only supply a single instance method, <inlinecode>next_revisions</inlinecode>, that returns an Array of revision objects, ordered from oldest to newest, each representing a single revision in your repository.</p>
    <table caption="Parameters for next_revisions">
      <header-row>
        <label>Parameter</label>
        <label>Type</label>
        <label>Description</label>
      </header-row>
      <row>
        <col>skip_up_to</col>
        <col>Revision</col>
        <col>The last revision cached by Mingle.</col>
      </row>
      <row>
        <col>limit</col>
        <col>Integer</col>
        <col>The maximum number of revisions that your repository should return for any call to next_revisions. This limit helps avoid memory spiking and subsequent performance degradation of Mingle.</col>
      </row>
    </table>

    <p>The <inlinecode>next_revisions</inlinecode> method will return an Array of revision objects, ordered from oldest to newest, empty if there are no new revisions beyond the 'skip_up_to' parameter. For purposes of history integration, each revision instance must provide the following methods:</p>

      <table caption="Methods required of a revision instance">
        <header-row>
          <label>Method</label>
          <label>Type</label>
          <label>Description / Return Value</label>
        </header-row>
         <row>
           <col>identifier</col>
           <col>String</col>
           <col>The unique revision identifier. For a distributed SCM such as Git or Mercurial, this will be a 40 character hash.  For a non-distributed SCM such as Subversion this will simply be the revision number, i.e., identifier and number are the same.</col>
         </row>
        <row>
          <col>number</col>
          <col>Integer</col>
          <col>The sequential number of this revision. With a distributed SCM such as Git or Mercurial, which use hash identifier, the local repository clone also maintains a revision number. Use this number.</col>
        </row>
         <row>
           <col>message</col>
           <col>String</col>
           <col>The commit message for the revision.</col>
         </row>
         <row>
           <col>version_control_user</col>
           <col>String</col>
           <col>The revision's committer. Mingle will attempt to match this value to the "Version control user name" field in a user's profile.</col>
         </row>
         <row>
           <col>time</col>
           <col>Time</col>
           <col>The time at which the revision was committed. As with all timestamps, Mingle will store this as UTC in the database.</col>
         </row>
      </table>

      <p>Once you have written your repository and revision classes, and implemented the <inlinecode>next_revisions</inlinecode> method on your configuration class Mingle should be able to include revisions of this SCM type in its history.  Deploy to Mingle, configure a project, and give it a try.</p>
  </section>

  <section title="Data and caching">
    <p>Some SCM plugin implementations will require the use of a filesystem, e.g., Mercurial requires a local clone of a repository in order to perform operations such as log. You must be a good citizen when determining an appropriate part of the filesystem to use. A general rule of thumb is that you can use "MINGLE_DATA_DIR/plugins/&lt;your_plugin_name&gt;" as your filesystem. It's up to you beyond that, but you'l likely want to use the configuration model's id value as part of the organization scheme beneath that. If you need to use the filesystem, see app/models/hg_configuration.rb in the hg plugin for some ideas on file system organization.</p>
  </section>

  <section title="What could go wrong?">
    <warning>The above might lead you to believe that it's fairly straight forward to get your commits into Mingle history.  And for the most part that's true, but there are a number of gotchas on which you absolutely must keep an eye.</warning>
    <p>First, you might be invoking a subprocess in order to query your repository for information. If you have ever written this type of code before you know that it typically gets very hairy before it's all working.  Be sure to consider the following: timeouts, handling errors (some programs return error code, some write to stderr, some do both), line breaks, unicode character sets, process cleanup.</p>
    <p>If you're not launching a subprocess, you are likely making a network connection to a remote repository. When connecting to an unreliable, third-part service, be sure to be very cognizant of the fact that Mingle has a limited number of JRuby runtimes with which to handle requests. Despite that revision caching runs in the background it still uses a runtime from the same pool used to process front-end requests. Be sure to handle all errors and resource cleanup correctly. And you might also consider a timeout policy.</p>
    <p>Some SCM tools, such as Mercurial, will require that you maintain a local clone of a repository. You might also be writing caching files for various reasons.  Be sure to clean these up when a repository configuration is deleted (use an AR hook), lest your plugin be responsible for a loss of disk space on Mingle's host.</p>
  </section>

  <cref topic="deployment_to_mingle">Previous: Deployment To Mingle</cref> | <cref topic="source_browser">Next: Source Browser</cref>
</chapter>
